{"version":3,"sources":["../index.js"],"names":["from","where","orderBy","select","selectMany","query","skip","take","groupBy","join","recordType","Symbol","keyProp","isPlainObject","val","constructor","Object","createRecord","result","items","item","next","push","leftTable","rightTable","length","record","leftRecord","rightRecord","sources","predicate","index","createFieldSelector","field","Function","orders","args","selector","shift","Array","direction","sortedItems","sort","a","b","aValue","bValue","itemSelectors","x","iterator","resultItem","clauses","reduce","clause","last","count","arguments","countOrPredicate","valid","serializeKey","key","keys","map","value","prop","keyId","get","__uniqueId","undefined","set","having","resultSet","originalKey","Date","getTime","filter"],"mappings":"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","file":"index.js","sourcesContent":["const recordType = Symbol(\"@@record\");\r\nconst keyProp = Symbol(\"@@key\");\r\nconst isPlainObject = val =>\r\n  !!val && typeof val === \"object\" && val.constructor === Object;\r\n\r\nfunction createRecord(...items) {\r\n  const result = [];\r\n  for (let item of items) {\r\n    if (item[recordType] || item.next) {\r\n      result.push(...item);\r\n    } else {\r\n      result.push(item);\r\n    }\r\n  }\r\n\r\n  result[recordType] = true;\r\n\r\n  return result;\r\n}\r\n\r\nfunction* join(leftTable, ...rightTable) {\r\n  if (!rightTable.length) {\r\n    for (let record of leftTable) {\r\n      yield createRecord(record);\r\n    }\r\n    return;\r\n  }\r\n  if (rightTable.length > 1) {\r\n    rightTable = join(...rightTable);\r\n  } else {\r\n    rightTable = rightTable[0];\r\n  }\r\n  for (let leftRecord of leftTable) {\r\n    for (let rightRecord of rightTable) {\r\n      yield createRecord(leftRecord, rightRecord);\r\n    }\r\n  }\r\n}\r\n\r\nexport function from(...sources) {\r\n  return function() {\r\n    return join(...sources);\r\n  };\r\n}\r\n\r\nexport function where(predicate) {\r\n  return function*(items) {\r\n    let index = 0;\r\n    for (let item of items) {\r\n      if (predicate(...item, index)) {\r\n        yield item;\r\n      }\r\n      index++;\r\n    }\r\n  };\r\n}\r\n\r\nfunction createFieldSelector(field) {\r\n  if (field instanceof Function) return field;\r\n  return function(item) {\r\n    return item[field];\r\n  };\r\n}\r\n\r\nexport function orderBy(...args) {\r\n  const orders = [];\r\n  while (args.length) {\r\n    const selector = args.shift();\r\n    if (selector instanceof Array) {\r\n      orders.push({\r\n        selector: selector[0],\r\n        direction: selector[1]\r\n      });\r\n    } else {\r\n      orders.push({\r\n        selector: createFieldSelector(selector),\r\n        direction: args.shift()\r\n      });\r\n    }\r\n  }\r\n  return function*(items) {\r\n    const sortedItems = [...items];\r\n    sortedItems.sort(function(a, b) {\r\n      for (let index = 0; index < orders.length; index++) {\r\n        const aValue = orders[index].selector(...a);\r\n        const bValue = orders[index].selector(...b);\r\n        if (aValue === bValue) {\r\n          continue;\r\n        }\r\n        return (\r\n          (orders[index].direction || orders[index].direction === \"desc\"\r\n            ? -1\r\n            : 1) * (aValue > bValue ? 1 : -1)\r\n        );\r\n      }\r\n    });\r\n\r\n    for (let item of sortedItems) {\r\n      yield item;\r\n    }\r\n  };\r\n}\r\n\r\nexport function select(selector, ...itemSelectors) {\r\n  if (!selector) {\r\n    selector = x => x;\r\n  }\r\n  return function*(items) {\r\n    let index = 0;\r\n    for (let item of items) {\r\n      yield selector(...item, ...itemSelectors, index);\r\n      index++;\r\n    }\r\n  };\r\n}\r\n\r\nexport function selectMany(selector, ...itemSelectors) {\r\n  if (!selector) {\r\n    selector = x => x;\r\n  }\r\n  return function*(items) {\r\n    let index = 0;\r\n    for (let item of items) {\r\n      const result = selector(...item, ...itemSelectors, index);\r\n      if (result instanceof Array || result.next || result[Symbol.iterator]) {\r\n        for (let resultItem of result) {\r\n          yield resultItem;\r\n        }\r\n      } else {\r\n        yield result;\r\n      }\r\n      index++;\r\n    }\r\n  };\r\n}\r\n\r\nexport function query(...clauses) {\r\n  function iterator() {\r\n    return clauses.reduce((result, clause) => clause(result), []);\r\n  }\r\n\r\n  return {\r\n    [Symbol.iterator]: iterator,\r\n    first() {\r\n      for (let item of iterator()) {\r\n        return item;\r\n      }\r\n    },\r\n    last() {\r\n      let last;\r\n      for (let item of iterator()) {\r\n        last = item;\r\n      }\r\n      return last;\r\n    },\r\n    count() {\r\n      let count = 0;\r\n      for (let item of iterator()) {\r\n        count++;\r\n      }\r\n      return count;\r\n    },\r\n    get(index) {\r\n      if (!arguments.length) {\r\n        return [...iterator()];\r\n      }\r\n\r\n      for (let item of iterator()) {\r\n        if (!index) return item;\r\n        index--;\r\n      }\r\n    },\r\n    distinct() {},\r\n    any() {},\r\n    all() {},\r\n    average() {},\r\n    contains() {},\r\n    except() {},\r\n    intersect() {},\r\n    max() {},\r\n    min() {},\r\n    prepend() {},\r\n    append() {},\r\n    union() {},\r\n    reduce() {}\r\n  };\r\n}\r\n\r\nexport function skip(countOrPredicate) {\r\n  return function*(items) {\r\n    if (countOrPredicate instanceof Function) {\r\n      let valid = false;\r\n      let index = 0;\r\n      for (let item of items) {\r\n        if (!valid && countOrPredicate(...item, index)) {\r\n          valid = true;\r\n        }\r\n        if (valid) {\r\n          yield item;\r\n        }\r\n        index++;\r\n      }\r\n    } else {\r\n      let count = 0;\r\n      for (let item of items) {\r\n        if (count >= countOrPredicate) {\r\n          yield item;\r\n        }\r\n        count++;\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nexport function take(countOrPredicate) {\r\n  return function*(items) {\r\n    if (countOrPredicate instanceof Function) {\r\n      let index = 0;\r\n      for (let item of items) {\r\n        if (!countOrPredicate(...item, index)) {\r\n          break;\r\n        }\r\n        yield item;\r\n        index++;\r\n      }\r\n    } else {\r\n      let count = 0;\r\n      for (let item of items) {\r\n        if (count >= countOrPredicate) {\r\n          break;\r\n        }\r\n        yield item;\r\n        count++;\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nfunction serializeKey(key, keys) {\r\n  return Object.keys(key)\r\n    .map(prop => {\r\n      let value = key[prop];\r\n      let keyId = keys.get(value);\r\n      if (!keyId) {\r\n        if (keys.__uniqueId === undefined) {\r\n          keys.__uniqueId = 1;\r\n        }\r\n        keyId = keys.__uniqueId++;\r\n        keys.set(value, keyId);\r\n      }\r\n      return keyId;\r\n    })\r\n    .join(\"-\");\r\n}\r\n\r\nexport function groupBy(selector, having) {\r\n  return function*(items) {\r\n    const keys = {};\r\n    let resultSet = [];\r\n    for (let item of items) {\r\n      let key = selector(...item);\r\n      const originalKey = key;\r\n      if (key instanceof Date) {\r\n        key = key.getTime();\r\n      }\r\n\r\n      let resultItem;\r\n      // multiple key\r\n      if (key instanceof Array || isPlainObject(key)) {\r\n        // serialize key\r\n        key = serializeKey(key, keys);\r\n      }\r\n      resultItem = keys[key];\r\n      if (!resultItem) {\r\n        resultItem = [];\r\n        resultSet.push(resultItem);\r\n        resultItem[keyProp] = originalKey;\r\n        keys[key] = resultItem;\r\n      }\r\n      resultItem.push(item);\r\n    }\r\n\r\n    if (having) {\r\n      resultSet = resultSet.filter(resultItem =>\r\n        having(resultItem[keyProp], resultItem)\r\n      );\r\n    }\r\n\r\n    for (let resultItem of resultSet) {\r\n      yield createRecord(resultItem[keyProp], resultItem);\r\n    }\r\n  };\r\n}\r\n\r\nexport default query;"]}