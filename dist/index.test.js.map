{"version":3,"sources":["../index.test.js"],"names":["require","query","where","groupBy","orderBy","select","selectMany","from","orders","id","customerId","orderDate","customers","name","test","q","customer","result","get","expect","toEqual","order","key","items","length","count"],"mappings":"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","file":"index.test.js","sourcesContent":["const {\r\n  query,\r\n  where,\r\n  groupBy,\r\n  orderBy,\r\n  select,\r\n  selectMany,\r\n  from\r\n} = require(\"./index\");\r\nconst orders = [\r\n  {\r\n    id: 10308,\r\n    customerId: 2,\r\n    orderDate: \"1996-09-18\"\r\n  },\r\n  {\r\n    id: 10309,\r\n    customerId: 1,\r\n    orderDate: \"1996-09-19\"\r\n  },\r\n  {\r\n    id: 10310,\r\n    customerId: 3,\r\n    orderDate: \"1996-09-20\"\r\n  },\r\n  {\r\n    id: 10311,\r\n    customerId: 3,\r\n    orderDate: \"1996-09-20\"\r\n  },\r\n  {\r\n    id: 10312,\r\n    customerId: 2,\r\n    orderDate: \"1996-09-20\"\r\n  }\r\n];\r\n\r\nconst customers = [\r\n  { id: 1, name: \"Alfreds Futterkiste\" },\r\n  { id: 2, name: \"Ana Trujillo Emparedados y helados\" },\r\n  { id: 3, name: \"Antonio Moreno Taquería\" }\r\n];\r\n\r\ntest(`\r\nSELECT  c.id, c.name\r\nFROM    customers c\r\nORDER BY\r\n        c.name DESC, c.id ASC\r\n`, () => {\r\n  const q = query(\r\n    from(customers),\r\n    orderBy(\r\n      // customer.name DESC\r\n      customer => customer.name,\r\n      true,\r\n      // customer.id ASC\r\n      customer => customer.id,\r\n      false\r\n    ),\r\n    select(customer => ({\r\n      id: customer.id,\r\n      name: customer.name\r\n    }))\r\n  );\r\n  const result = q.get();\r\n\r\n  expect(result).toEqual([\r\n    { id: 3, name: \"Antonio Moreno Taquería\" },\r\n    { id: 2, name: \"Ana Trujillo Emparedados y helados\" },\r\n    { id: 1, name: \"Alfreds Futterkiste\" }\r\n  ]);\r\n});\r\n\r\ntest(`\r\nSELECT  o.id\r\nFROM    orders o\r\nWHERE   o.orderDate <= '1996-09-19'\r\n`, () => {\r\n  const q = query(\r\n    from(orders),\r\n    where(order => order.orderDate <= \"1996-09-19\"),\r\n    select(order => order.id)\r\n  );\r\n  const result = q.get();\r\n\r\n  expect(result).toEqual([10308, 10309]);\r\n});\r\n\r\ntest(`\r\nSELECT  o.customerId, COUNT(o.id) AS count\r\nFROM    orders o\r\nGROUP BY\r\n        o.customerId\r\nHAVING  COUNT(o.id) > 1\r\n`, () => {\r\n  const q = query(\r\n    from(orders),\r\n    groupBy(\r\n      // key selector\r\n      order => order.customerId,\r\n      // having\r\n      (key, items) => items.length > 1\r\n    ),\r\n    select((key, items) => ({\r\n      customerId: key,\r\n      count: items.length\r\n    }))\r\n  );\r\n  const result = q.get();\r\n\r\n  expect(result).toEqual([\r\n    { customerId: 2, count: 2 },\r\n    { customerId: 3, count: 2 }\r\n  ]);\r\n});\r\n\r\ntest(`\r\nselectMany\r\n`, () => {\r\n  const q = query(from([[1, 2, 3], [4, 5, 6]]), selectMany());\r\n  const result = q.get();\r\n\r\n  expect(result).toEqual([1, 2, 3, 4, 5, 6]);\r\n});\r\n"]}